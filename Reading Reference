- [Making architecture matter](https://www.youtube.com/watch?v=DngAZyWMGR0)
- [Why you should not ignore design or architecture](https://www.martinfowler.com/bliki/DesignStaminaHypothesis.html) 
- [A basic writeup on Architecture patterns](https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013)
- [Reactive systems manifesto](https://www.reactivemanifesto.org) 
- [Blog explaining reactive manifesto](https://medium.com/@jboner/the-reactive-manifesto-31014a369168)
- [BASE vs ACID vs SALT](http://www.ise.tu-berlin.de/fileadmin/fg308/publications/2017/2017-tai-eberhardt-klems-SALT.pdf) 
- [Quality attributes in Software Architecture](https://hackernoon.com/quality-attributes-in-software-architecture-3844ea482732) 
- [Stream processing 101](https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101)
- [Stream processing 201](https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102)
- [About architects](https://medium.com/@nvashanin/types-of-software-architects-aa03e359d192)
- [Functional Reactive programming talk](https://www.youtube.com/watch?v=gT6il5fJyAs)
- [Difference between Reactive & Functional Reactive](https://www.oreilly.com/ideas/reactive-programming-vs-reactive-systems) 
- [Details reading on microservices architecture](https://martinfowler.com/articles/microservices.html)
- [Video on how complex system can be designed as microservices ](https://www.youtube.com/watch?v=CZ3wIuvmHeM)
- [What is bounded context](https://martinfowler.com/bliki/BoundedContext.html)
- [Reactive Systems](https://www.reactivemanifesto.org)
- [What is event driven](https://martinfowler.com/articles/201701-event-driven.html)
- [Testing Microservices](https://martinfowler.com/articles/microservice-testing/)
- [Domain Driven design by Eric Evans](https://www.youtube.com/watch?v=yPvef9R3k-M) 
- [Strangler pattern for converting monolith to microservices](https://www.ibm.com/developerworks/cloud/library/cl-strangler-application-pattern-microservices-apps-trs/index.html)
- [One more on strangler pattern](https://paulhammant.com/2013/07/14/legacy-application-strangulation-case-studies/)
- [Blog on microservices in practice](https://medium.com/microservices-in-practice/microservices-in-practice-7a3e85b6624c) 
- [Details reading on microservices architecture](https://martinfowler.com/articles/microservices.html)
- [Video on how complex system can be designed as microservices ](https://www.youtube.com/watch?v=CZ3wIuvmHeM)
- [What is bounded context](https://martinfowler.com/bliki/BoundedContext.html)
- [Reactive Systems](https://www.reactivemanifesto.org)
- [What is event driven](https://martinfowler.com/articles/201701-event-driven.html)
- [Testing Microservices](https://martinfowler.com/articles/microservice-testing/)
- [Domain Driven design by Eric Evans](https://www.youtube.com/watch?v=yPvef9R3k-M) 
- [Strangler pattern for converting monolith to microservices](https://www.ibm.com/developerworks/cloud/library/cl-strangler-application-pattern-microservices-apps-trs/index.html)
- [One more on strangler pattern](https://paulhammant.com/2013/07/14/legacy-application-strangulation-case-studies/)
- [Blog on microservices in practice](https://medium.com/microservices-in-practice/microservices-in-practice-7a3e85b6624c) 
- [Article about use cases on stream processing](https://www.infoq.com/articles/stream-processing-hadoop)
- [Basic scenarios using streams in NodeJS](http://codewinds.com/blog/2013-08-02-streams-basics.html)
- [NodeJS Stream cheat sheet](https://devhints.io/nodejs-stream)
- [About events and streams](https://codeburst.io/basics-of-events-streams-and-pipe-in-node-js-b84578c2f1be)
- [Collection of many links about Streams](https://github.com/substack/stream-handbook)
- [History of nodejs streams part 1 & 2](https://medium.com/the-node-js-collection/a-brief-history-of-node-streams-pt-1-3401db451f21)
- [Faster I/O operations using streams](https://www.sitepen.com/blog/2017/10/02/a-guide-to-faster-web-app-io-and-data-operations-with-streams/)
- [A easier but very basic tutorial on streams](https://www.guru99.com/node-js-streams-filestream-pipes.html)
- [Backpressure in streams](https://nodejs.org/en/docs/guides/backpressuring-in-streams/)
- [Streams NodeJS API documentation](https://nodejs.org/docs/latest-v8.x/api/stream.html)
- [How kafka is leading stream processing](https://www.techrepublic.com/article/why-streaming-data-is-the-future-of-big-data-and-apache-kafka-is-leading-the-charge)
- [How Javascript works in chrome v8 ] (https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e)
- [How chrome's compilation becomes efficient](https://v8project.blogspot.in/2017/05/launching-ignition-and-turbofan.html)
- [Turbofan - optimizing compiler for v8](https://github.com/v8/v8/wiki/TurboFan)
- [Event driven in Node.js](http://www.baloo.io/blog/2013/11/30/node-event-driven-programming/)
- [Event loop & concurrency](https://medium.com/@tigranbs/concurrency-vs-event-loop-vs-event-loop-concurrency-eb542ad4067b)
- [Node.js official doc on event loop](https://nodejs.org/en/docs/guides/)
- [Understand closures before you use callbacks](https://medium.freecodecamp.org/whats-a-javascript-closure-in-plain-english-please-6a1fc1d2ff1c)
- [Another article on doing async correctly](http://www.sebastianseilund.com/nodejs-async-in-practice)
- [Managing callback hell](http://stackabuse.com/avoiding-callback-hell-in-node-js/)
- [Confused about node.js architecture diagrams?](https://stackoverflow.com/questions/36766696/which-is-correct-node-js-architecture)
- [Finished reading all references? check your knowledge now](https://medium.freecodecamp.org/before-you-bury-yourself-in-packages-learn-the-node-js-runtime-itself-f9031fbd8b69)
